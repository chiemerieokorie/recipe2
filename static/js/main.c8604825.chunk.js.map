{"version":3,"sources":["components/RecipeItem.js","foodAPI.js","components/RecipeList.js","actions/index.js","TYPES.js","components/RecipeInfo.js","components/App.js","reducers/index.js","index.js"],"names":["RecipeItem","props","id","title","image","imageURL","className","to","src","alt","axios","create","baseURL","params","apiKey","RecipeList","renderSearch","input","type","placeholder","aria-label","onSubmit","formValues","searchTheTerm","term","renderRecipeList","recipes","length","map","recipe","key","this","style","background","minHeight","padding","borderRadius","handleSubmit","Field","name","component","recipesList","React","Component","wrappedApp","reduxForm","form","connect","state","dispatch","a","async","foodAPI","get","query","number","payload","data","results","RecipeInfo","renderIngredientsList","ingredientsList","ingredient","originalString","match","getRecipeInfo","sourceName","instructions","extendedIngredients","console","log","scope","ownProps","recipeId","endPoint","App","basename","path","exact","combineReducers","reducer","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.c8604825.chunk.js","sourcesContent":["import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nconst RecipeItem = (props) => {\n\n    const {id, title, image} = props;\n    const imageURL = `https://spoonacular.com/recipeImages/${image}`;\n    return (\n\n                <div className=\"card\">\n                    <Link to={`/recipe/${id}`}>\n                    <img className=\"card-img-top\" src={imageURL} alt={title}/>\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title primary list-inline-item\">{title}</h5>\n                    </div>\n                    </Link>\n                </div>\n\n    );\n};\n\nexport default RecipeItem","import axios from \"axios\";\n\nconst apiKey = \"dddd04e0d57047d8a0aa1e4b3d3745a0\";\n\n// If the api key is not working go to https://spoonacular.com/ type in a fake email and password to get a new api key\n\n\nexport default axios.create({\n    baseURL : \"https://api.spoonacular.com\",\n    params: { apiKey}\n\n});","import React from \"react\";\nimport {connect} from 'react-redux';\nimport {Field, reduxForm} from 'redux-form'\n\nimport RecipeItem from \"./RecipeItem\";\nimport {searchTheTerm} from '../actions'\nimport \"../app.css\"\n\nclass RecipeList extends React.Component {\n\n\n    componentDidMount() {\n\n        // When the list component first mounts, We search for an empty string to display some content\n        this.props.searchTheTerm(\"\")\n\n    }\n\n\n    renderSearch = ({input}) => {\n\n        return (  <input {...input} className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\"\n                         aria-label=\"Search\"/>)\n\n    };\n\n\n    onSubmit = (formValues) => {\n        this.props.searchTheTerm(formValues.term)\n    };\n\n\n    renderRecipeList = (recipes) => {\n\n        if(recipes.length === 0 ){\n            return <div> </div>\n        }\n\n        return recipes.map( recipe => {\n\n                const {id, title, image} = recipe;\n\n                return <RecipeItem key={id} id={id} title={title} image={image}/>\n\n            }\n        )\n\n    };\n\n    render() {\n\n        return (\n\n            <div style={{background: \"#F9EDCC\", minHeight: \"100vh\"}}>\n\n                <div className=\"container\" style={{padding: '20px', borderRadius: '20px'}}>\n\n                    <nav className=\"navbar navbar-transparent m-y-2\">\n                        <a className=\"navbar-brand text-primary\">Recipe</a>\n                        <form className=\"form-inline\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\n                                <Field name=\"term\" component={this.renderSearch}/>\n                        </form>\n                    </nav>\n\n\n\n                    <div className=\"card-columns\">\n                        {this.renderRecipeList(this.props.recipesList)}\n                    </div>\n                </div>\n            </div>\n\n        );\n    };\n}\n\nconst wrappedApp = reduxForm({form: \"searchTerm\"})(RecipeList);\n\n\nconst mapStateToProps = (state) => {\n    const {recipesList} = state;\n    return {recipesList}\n\n};\n\n\nexport default connect(mapStateToProps, {searchTheTerm})(wrappedApp);","import {RECIPE_LIST, GET_RECIPE} from \"../TYPES\"\nimport foodAPI from \"../foodAPI\";\n\nexport const searchTheTerm =  (term) => async (dispatch) => {\n\n        const recipes = await foodAPI.get(\"/recipes/search\",\n            {params: {query: term, number:24}\n        });\n\n        dispatch({type: RECIPE_LIST, payload: recipes.data.results});\n};\n\nexport const getRecipeInfo = id => async dispatch =>{\n\n        const endPoint = `recipes/${id}/information`;\n\n        const recipe = await foodAPI.get(endPoint);\n\n        dispatch({type: GET_RECIPE, payload: recipe.data})\n\n};","export const RECIPE_LIST = \"RECIPE_LIST\";\nexport const GET_RECIPE = \"GET_RECIPE\";\n\n","import React from \"react\";\nimport {connect} from 'react-redux'\nimport {Link} from \"react-router-dom\";\n\nimport {getRecipeInfo} from \"../actions\"\n\nclass RecipeInfo extends React.Component {\n\n    componentDidMount() {\n\n        this.props.getRecipeInfo(this.id)\n    }\n\n    renderIngredientsList = ingredientsList => ingredientsList.map(ingredient => {\n\n            const {name, originalString} = ingredient;\n\n             return <tr> <td>{name}</td> <td>{originalString}</td></tr>\n\n            });\n\n    id = this.props.match.params.id;\n\n\n    render() {\n\n\n        if (!this.props.title) {\n\n            return <div> </div>\n        }\n\n        const {image, title, sourceName, instructions, extendedIngredients} = this.props;\n         console.log(this.renderIngredientsList(extendedIngredients));\n\n        return (\n\n\n                <div className=\"container\">\n                <nav className=\"navbar navbar-default\">\n                    <div className=\"container-fluid\">\n                        <div className=\"navbar-header\">\n\n                            <h1><Link to=\"/\" className=\"navbar-brand\">Recipes </Link></h1>\n                        </div>\n                    </div>\n                </nav>\n\n\n                    <div className=\"media\">\n                        <img src={image} className=\"mr-3\" alt={title}/>\n                        <div className=\"media-body\">\n                            <h5 className=\"mt-0\">{title}</h5>\n\n                            Source: {sourceName}\n                            <br/>\n                            <br/>\n                            <h6><strong>Instructions</strong></h6>\n                            {instructions}\n\n\n                        </div>\n\n\n                    </div>\n\n                    <table className=\"table table-borderless\">\n                        <thead className=\"thead-primary\">\n                        <tr>\n                            <th scope=\"col\">Ingredients</th>\n                            <th scope=\"col\">Amount</th>\n\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {this.renderIngredientsList(extendedIngredients)}\n                        </tbody>\n                    </table>\n                </div>\n\n\n        );\n    }\n};\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const recipeId = ownProps.match.params.id;\n    return state.recipes[recipeId]\n};\n\n\nexport default connect(mapStateToProps, {getRecipeInfo})(RecipeInfo)","import React from \"react\";\nimport {BrowserRouter, Route} from \"react-router-dom\"\nimport RecipeList from \"./RecipeList\";\nimport RecipeInfo from \"./RecipeInfo\";\n\n\nconst App = () => {\n\n\n    return (\n        <div>\n            <BrowserRouter basename =\"/recipe2\">\n                <div>\n                    <Route path='/' exact component={RecipeList}/>\n                    <Route path='/recipe/:id' exact component={RecipeInfo}/>\n                </div>\n            </BrowserRouter>\n        </div>\n\n    );\n\n};\n\nexport default App","import {combineReducers} from 'redux';\nimport {reducer} from \"redux-form\";\nimport {RECIPE_LIST, GET_RECIPE} from \"../TYPES\"\n\n\n\nconst recipesList = (state = [], action) =>{\n\n    switch (action.type) {\n\n        case RECIPE_LIST:\n            return  action.payload;\n\n        default: return state\n    }\n};\n\nconst recipes = (state = {}, action) =>{\n\n    switch(action.type) {\n\n        case GET_RECIPE:\n            return {...state, [action.payload.id]: action.payload};\n\n        default:\n            return state\n    }\n\n};\n\nexport default combineReducers({ form: reducer, recipesList, recipes})","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {applyMiddleware, createStore} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {Provider} from \"react-redux\"\n\nimport App from \"./components/App\";\nimport reducers from './reducers';\n\n\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render( <Provider store={store}><App/></Provider>,\n    document.querySelector('#root'));"],"sourceRoot":""}